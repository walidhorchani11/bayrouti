<?php

namespace EcommerceBundle\Listener;

use Doctrine\Common\EventSubscriber;
use Doctrine\ORM\Event\LifecycleEventArgs;
use Doctrine\ORM\Event\PreUpdateEventArgs;
use EcommerceBundle\Entity\Client;
use EcommerceBundle\Entity\Product;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class Product_imageListener implements EventSubscriber
{

    private $directoryImage;
    private $tempFilename;

    public function __construct($directory)
    {
        $this->directoryImage = $directory;

    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    private function uploadFile($entity)
    {
        // upload only works for Product entities
        if ($this->testEntity($entity) === false)
            return;

        $file = $entity->getImage();

        // only upload new files
        if ($file instanceof UploadedFile) {

            $fileName = md5(uniqid()) . '.' . $file->guessExtension();
            $file->move($this->directoryImage, $fileName);
            $entity->setImage($fileName);

        }
    }

    private function rmFile($file)
    {
        if (file_exists($file))
            unlink($file);

    }

    public function testEntity($entity)
    {
        $res = false;
        if ($entity instanceof Product || $entity instanceof Client)
            $res = true;

        return $res;

    }

    public function prePersist(LifecycleEventArgs $args)
    {
        $entity = $args->getEntity();
        if ($this->testEntity($entity) === false)
            return;

        $file = $entity->getImage();
        $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

        $file->move($this->directoryImage, $fileName);

        $entity->setImage($fileName);
        $entity->setImageName($fileName);

    }

    public function preRemove(LifecycleEventArgs $args)
    {
        $entity = $args->getEntity();
        if ($this->testEntity($entity) === false)
            return;

        $this->tempFilename = $entity->getImage();
    }

    public function preUpdate(PreUpdateEventArgs $args)
    {
        $entity = $args->getEntity();
        if ($this->testEntity($entity) === false)
            return;

        $this->uploadFile($entity);

        $this->rmFile($this->directoryImage . '/' . $entity->getImageName());
        $entity->setImageName($entity->getImage());

    }

    public function postRemove(LifecycleEventArgs $args)
    {
        $entity = $args->getEntity();
        if ($this->testEntity($entity) === false)
            return;

        // En PostRemove, on n'a pas acc?s ? l'id, on utilise notre nom sauvegard?
        $this->rmFile($this->directoryImage . '/' . $this->tempFilename);
    }

    /**
     * Returns an array of events this subscriber wants to listen to.
     *
     * @return array
     */
    public function getSubscribedEvents()
    {
        return array(
            'prePersist',
            'preRemove',
            'postRemove',
            'preUpdate',
        );
    }
}
